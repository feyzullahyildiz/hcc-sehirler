{"version":3,"sources":["config.js","index.js"],"names":["url","module","exports","cities","require","centroids","config","map","document","querySelector","mapHeader","menu","city","categoryA","categoryB","categoryC","categoryTotal","countOfMosque","loadSvg","data","xSpace","ySpace","pointArray","totalMosqueCount","index","features","feature","code","properties","ILKOD","name","NAME","geometry","coordinates","x","y","parseInt","polygon","points","_x","_y","sayi","a","b","c","JSON","stringify","success","isNaN","innerHTML","svg","citiesPolygons","querySelectorAll","oldPolygons","onEnter","forEach","oldPolygon","style","fill","push","parse","opacity","cityData","addEventListener","fetch","then","json"],"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","file":"hcc-cities.e31bb0bc.map","sourceRoot":"..","sourcesContent":["const url = 'https://api.myjson.com/bins/1cdh68'\n\n\nmodule.exports = {\n    url\n}","const cities = require('./iller.json')\nconst centroids = require('./iller-orta.json')\nconst config = require('./config')\nconst map = document.querySelector('#turkey-svg-cities-continer .map-container .map')\nconst mapHeader = document.querySelector('#turkey-svg-cities-continer .map-container .map-header')\nconst menu = document.querySelector('#turkey-svg-cities-continer .map-menu')\n\nconst city = menu.querySelector('.map-menu-city')\nconst categoryA = menu.querySelector('.map-menu-category.a')\nconst categoryB = menu.querySelector('.map-menu-category.b')\nconst categoryC = menu.querySelector('.map-menu-category.c')\nconst categoryTotal = menu.querySelector('.map-menu-category-total')\nconst countOfMosque = menu.querySelector('.map-menu-mosque-count')\n// [ 2857405, 4275017 ], [ 2857405, 5175729 ], [ 4989109, 5175729 ], [ 4989109, 4275017 ], [ 2857405, 4275017 ] //bbox\nconst loadSvg = function(data){\n    const xSpace = 1420\n    const ySpace = 2590\n    let pointArray = ''\n    let totalMosqueCount = 0\n    for(const index in cities.features){\n        const feature = cities.features[index]\n        const code = centroids.features[index].properties.ILKOD\n        const name = centroids.features[index].properties.NAME\n        let [x, y] = centroids.features[index].geometry.coordinates\n        x = parseInt((x/2000) - xSpace)\n        y = parseInt(ySpace - (y/2000))\n        pointArray += `<g>`\n        for (const polygon of feature.geometry.coordinates) {\n            let points = ''\n            for (const [_x, _y] of polygon[0]) {\n                points += `${parseInt((_x/2000) - xSpace)},${parseInt(ySpace - (_y/2000))} `\n            }\n            pointArray +=`<polygon points=\"${points}\"/>`\n        }\n        if(data[code] && data[code].sayi){\n            totalMosqueCount += data[code].sayi\n        }\n        pointArray += `\n        <text x=\"${x}\" y=\"${y}\" fill=\"white\">\n            <tspan text-anchor=\"middle\">${data[code] ? (data[code].a + data[code].b + data[code].c): '-'}</tspan>\n            </text>\n            <desc>${data[code] ? JSON.stringify({...data[code], name, success: true}): JSON.stringify({name})}</desc>\n        </g>`\n    }\n    if(!isNaN(totalMosqueCount)){\n        mapHeader.innerHTML = 'Toplam Cami ' + totalMosqueCount\n    }\n    let svg = `\n    <svg viewBox=\"0 0 1080 460\" width=\"100%\">\n    ${pointArray}\n    </svg>\n    `\n    map.innerHTML = svg\n    \n    const citiesPolygons = map.querySelectorAll('svg g')\n    let oldPolygons\n    const onEnter = function(){\n        if(oldPolygons){\n            oldPolygons.forEach(oldPolygon => {\n                oldPolygon.style.fill = ''\n            })\n        }\n        oldPolygons = []\n        this.querySelectorAll('polygon').forEach(polygon => {\n            oldPolygons.push(polygon)\n            polygon.style.fill = '#f49225'\n        })\n        const data = this.querySelector('desc')\n        if(data.innerHTML && JSON.parse(data.innerHTML).success){\n            // menu.style.display = 'flex'\n            menu.style.opacity = 1\n            const cityData = JSON.parse(data.innerHTML)\n            city.innerHTML = cityData.name\n            categoryA.innerHTML = cityData.a\n            categoryB.innerHTML = cityData.b\n            categoryC.innerHTML = cityData.c\n            categoryTotal.innerHTML = cityData.a + cityData.b + cityData.c\n            countOfMosque.innerHTML = cityData.sayi\n        }else{\n            city.innerHTML = JSON.parse(data.innerHTML).name\n            categoryA.innerHTML = 0\n            categoryB.innerHTML = 0\n            categoryC.innerHTML = 0\n            categoryTotal.innerHTML = 0\n            countOfMosque.innerHTML = 0\n        }\n    }\n    citiesPolygons.forEach(city => {\n        city.addEventListener('click', onEnter)\n    })\n}\n\nfetch(config.url).then(x => x.json()).then(data => {\n    // delete data[\"1\"]\n    // delete data[\"2\"]\n    // delete data[\"3\"]\n    loadSvg(data)\n})"]}